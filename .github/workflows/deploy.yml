name: Deploy to GKE with Health Check

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/docker-healthcheck-app
  GKE_CLUSTER: healthcheck-app-cluster
  GKE_ZONE: asia-east1-a
  APP_NAME: docker-healthcheck-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_IMAGE:$GITHUB_SHA .
          docker push $DOCKER_IMAGE:$GITHUB_SHA

  deploy-to-gke:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 410.0.0'
          install_components: 'gke-gcloud-auth-plugin'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER \
            --zone $GKE_ZONE \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          cat <<EOF > deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: $APP_NAME
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: $APP_NAME
            template:
              metadata:
                labels:
                  app: $APP_NAME
              spec:
                containers:
                - name: $APP_NAME
                  image: $DOCKER_IMAGE:$GITHUB_SHA
                  command: ["node", "src/index.js"]
                  ports:
                  - containerPort: 3000
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 3000
                    initialDelaySeconds: 5
                    periodSeconds: 5
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 3000
                    initialDelaySeconds: 10
                    periodSeconds: 10
                  resources:
                    requests:
                      cpu: "100m"
                      memory: "128Mi"
          EOF

          cat <<EOF > service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: $APP_NAME-service
          spec:
            type: LoadBalancer
            ports:
            - port: 80
              targetPort: 3000
            selector:
              app: $APP_NAME
          EOF

          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

      - name: Wait for rollout and verify health
        run: |
          kubectl rollout status deployment/$APP_NAME --timeout=15m

          POD_NAME=$(kubectl get pods -l app=$APP_NAME -o jsonpath='{.items[0].metadata.name}')

          kubectl wait --for=condition=Ready pod/$POD_NAME --timeout=5m

          for i in {1..10}; do
            if kubectl exec $POD_NAME -- node -e "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"; then
              echo '✅ Health check passed'
              break
            fi
            echo "⏳ Health check attempt $i/10 failed"
            sleep 10
          done

          kubectl exec $POD_NAME -- node -e "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))" || \
          (echo '❌ Health check failed'; exit 1)

      - name: Debug on failure
        if: failure()
        run: |
          echo "=== Cluster State ==="
          kubectl get all
          echo "=== Pod Description ==="
          POD_NAME=$(kubectl get pods -l app=$APP_NAME -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
          if [ -n "$POD_NAME" ]; then
            kubectl describe pod $POD_NAME
            kubectl logs $POD_NAME
          fi
