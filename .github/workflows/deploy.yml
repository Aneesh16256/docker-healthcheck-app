name: Deploy to GKE with Health Check & Rollback

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/docker-healthcheck-app
  GKE_CLUSTER: test-monitoring
  GKE_ZONE: us-central1-a
  APP_NAME: docker-healthcheck-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_IMAGE:$GITHUB_SHA .
          docker push $DOCKER_IMAGE:$GITHUB_SHA

  deploy-to-gke:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 410.0.0'
          install_components: 'gke-gcloud-auth-plugin'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER \
            --zone $GKE_ZONE \
            --project ${{ secrets.GCP_PROJECT_ID }}
          
          kubectl config current-context
          kubectl cluster-info

      - name: Debug Cluster Status
        run: |
          kubectl get nodes
          kubectl get deployments
          kubectl get pods

      - name: Deploy to GKE
        run: |
          # Clean up any previous failed deployment
          kubectl delete deployment $APP_NAME --ignore-not-found || true
          kubectl delete service $APP_NAME --ignore-not-found || true
          
          # Create fresh deployment with proper configuration
          kubectl create deployment $APP_NAME \
            --image=$DOCKER_IMAGE:$GITHUB_SHA \
            --dry-run=client -o yaml > deployment.yaml
          
          # Add proper health checks and resource limits
          cat <<EOF >> deployment.yaml
              readinessProbe:
                httpGet:
                  path: /health
                  port: 3000
                initialDelaySeconds: 15
                periodSeconds: 5
              livenessProbe:
                httpGet:
                  path: /health
                  port: 3000
                initialDelaySeconds: 30
                periodSeconds: 10
              resources:
                requests:
                  cpu: "100m"
                  memory: "128Mi"
                limits:
                  cpu: "200m"
                  memory: "256Mi"
          EOF
          
          kubectl apply -f deployment.yaml
          kubectl expose deployment $APP_NAME \
            --port=80 \
            --target-port=3000 \
            --type=LoadBalancer
          
          kubectl rollout status deployment/$APP_NAME --timeout=5m

      - name: Verify deployment
        run: |
          kubectl wait --for=condition=Available deployment/$APP_NAME --timeout=5m
          POD_NAME=$(kubectl get pods -l app=$APP_NAME -o jsonpath='{.items[0].metadata.name}')
          kubectl describe pod $POD_NAME
          kubectl logs $POD_NAME
          kubectl exec $POD_NAME -- curl -s http://localhost:3000/health

      - name: Rollback if deployment fails
        if: failure()
        run: |
          echo "ðŸš¨ Initiating rollback..."
          kubectl get deployment $APP_NAME -o yaml > deployment-failed.yaml
          kubectl rollout undo deployment/$APP_NAME
          kubectl rollout status deployment/$APP_NAME --timeout=5m
          echo "âœ… Rollback completed successfully"
          
          # Save logs for debugging
          POD_NAME=$(kubectl get pods -l app=$APP_NAME -o jsonpath='{.items[0].metadata.name}' || true)
          if [ -n "$POD_NAME" ]; then
            kubectl logs $POD_NAME > failed-pod-logs.txt
            kubectl describe pod $POD_NAME > failed-pod-description.txt
          fi
