name: Deploy to GKE with Health Check & Rollback

on:
  push:
    branches: [ main ]

env:
  # Environment variables (update these)
  DOCKER_IMAGE: your-dockerhub-username/docker-healthcheck-app
  GKE_CLUSTER: your-gke-cluster-name  # From GCP Console ‚Üí Kubernetes Engine
  GKE_ZONE: us-central1-a             # Zone where your cluster is located
  APP_NAME: docker-healthcheck-app    # Name for K8s resources

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          # Build with commit SHA tag
          docker build -t $DOCKER_IMAGE:$GITHUB_SHA .
          
          # Push the versioned image
          docker push $DOCKER_IMAGE:$GITHUB_SHA
          
          # Also tag and push as 'latest'
          docker tag $DOCKER_IMAGE:$GITHUB_SHA $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:latest

  deploy-to-gke:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER \
            --zone $GKE_ZONE \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          # Update image tag in deployment
          kubectl set image deployment/$APP_NAME $APP_NAME=$DOCKER_IMAGE:$GITHUB_SHA --record
          
          # Wait for rollout to complete
          kubectl rollout status deployment/$APP_NAME --timeout=3m
          
          # Apply service if not exists
          kubectl apply -f k8s/service.yaml

      - name: Verify deployment
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=Ready pod -l app=$APP_NAME --timeout=2m
          
          # Get pod name
          POD_NAME=$(kubectl get pods -l app=$APP_NAME -o jsonpath='{.items[0].metadata.name}')
          
          # Check health endpoint with retries
          for i in {1..5}; do
            HEALTH_STATUS=$(kubectl exec $POD_NAME -- curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health || echo "500")
            if [ "$HEALTH_STATUS" = "200" ]; then
              echo "‚úÖ Health check passed"
              exit 0
            fi
            echo "‚ö†Ô∏è Attempt $i: Health check failed (Status: $HEALTH_STATUS)"
            sleep 5
          done
          
          echo "‚ùå Health check failed after 5 attempts"
          exit 1

      - name: Rollback if deployment fails
        if: failure()
        run: |
          echo "üö® Initiating rollback..."
          kubectl rollout undo deployment/$APP_NAME
          kubectl rollout status deployment/$APP_NAME --timeout=2m
          echo "‚úÖ Successfully rolled back"
